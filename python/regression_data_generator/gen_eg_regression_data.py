import argparse
import glob
import h5py
import math
import os.path
import sys

from NekPy.FieldUtils import Field, InputModule, ProcessModule

eg_reg_tests_dir = os.path.normpath(sys.path[0] + "/../../test/regression/examples")


def get_nsteps(session, tol=1e-12):
    """
    Extract number of steps from the nektar session.
    """
    nsteps_str = "NumSteps"
    if session.DefinesParameter(nsteps_str):
        return int(session.GetParameter(nsteps_str))
    else:
        exit(f"Expected {nsteps_str} to be defined in the example's session file")


def read_nektar_fld_and_gen_pts(run_dir):
    """
    1. Look for xml files and a .fld file in run_dir
    2. Use nektar's FieldConvert modules to generate equispaced points from the .fld data
    3. Write the points
    """
    config_fpaths = glob.glob(os.path.join(run_dir, "*.xml"))
    fld_fpath = glob.glob(os.path.join(run_dir, "*.fld"))
    assert len(fld_fpath) > 0, f"No .fld file in {run_dir}"
    assert len(fld_fpath) == 1, f"Found multiple .fld files in {run_dir}"

    # Init Field object
    field = Field(config_fpaths)

    # Read config
    InputModule.Create("xml", field, *config_fpaths).Run()

    # Read fld file
    InputModule.Create("fld", field, fld_fpath[0]).Run()

    # Compute equi-spaced points
    ProcessModule.Create("equispacedoutput", field).Run()

    # Return points in a dict to simplify output later
    ndims = field.graph.GetSpaceDimension()
    nsteps = get_nsteps(field.session)
    return nsteps, {
        fld_name: field.GetPts(ndims + fld_idx)
        for fld_idx, fld_name in enumerate(field.session.GetVariables())
    }


def user_confirms(msg: str) -> bool:
    opts = ("y", "n")
    opt_str = " or ".join(opts)
    while (
        answer := input(f"{msg} (Choose {opt_str})").strip().lower()[:1]
    ) not in opts:
        print(f"Invalid input; choose {opt_str}")

    return answer == opts[0]


def data_dir(solver_name: str):
    return os.path.join(eg_reg_tests_dir, solver_name)


def reg_data_fname(eg_name: str):
    return f"{eg_name}.regression_data.h5"


def gen_eg_regression_data(
    solver_name: str, eg_name: str, attrs={}, example_runs_root=None
):
    eg_reg_data_dir = data_dir(solver_name)
    os.makedirs(eg_reg_data_dir, exist_ok=True)

    if example_runs_root is None:
        example_runs_root = os.path.normpath(sys.path[0] + "/../../runs")
    run_dir = os.path.join(example_runs_root, solver_name, eg_name)
    nsteps, fld_data = read_nektar_fld_and_gen_pts(run_dir)
    attrs["nsteps"] = nsteps

    pth = os.path.join(eg_reg_data_dir, reg_data_fname(eg_name))
    if os.path.exists(pth):
        if not user_confirms(f"Overwrite file at {pth}?"):
            print("Aborted.")
            return
    with h5py.File(pth, "w") as fh:
        for fld_name, fld_vals in fld_data.items():
            fh.create_dataset(fld_name, data=fld_vals)
        fh.attrs.update(attrs)
    print(f"Wrote regression data to {pth}")


def read_regression_data(solver_name: str, eg_name: str):
    pth = os.path.join(data_dir(solver_name), reg_data_fname(eg_name))
    if not os.path.exists(pth):
        print(f"No regression data found at {pth}")
        return

    print(f"Reading regression data at {pth}")
    with h5py.File(pth, "r") as data:
        print(f" nsteps = {data.attrs['nsteps']}")
        print(f" Field data:")
        for fld_name, fld_data in data.items():
            print(f"  {fld_name}: {fld_data}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=f"Extract data from a Nektar++ .fld file (generated by running one of the solver examples) and write it to an HDF5 file in {eg_reg_tests_dir}/[solver_name]/[example_name]",
    )
    parser.add_argument("solver_name")
    parser.add_argument("example_name")
    parser.add_argument("-r", "--read", action="store_true")
    args = parser.parse_args(args=None if sys.argv[1:] else ["--help"])
    if args.read:
        read_regression_data(args.solver_name, args.example_name)
    else:
        gen_eg_regression_data(args.solver_name, args.example_name)
